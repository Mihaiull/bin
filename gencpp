#!/bin/sh
#
# Generate a base folder structures for cpp projects
#
mkdir debug build src include .vscode
APP="app.cpp"
TASKS=".vscode/tasks.json"
SETTINGS=".vscode/settings.json"
touch "$APP"
touch "$TASKS"
touch "$SETTINGS"
touch Makefile

echo "Project files and directories created"

echo "#include <iostream>

int main() {
    std::cout << \"Makefile generated successfully\" << std::endl;
    return 0;
}
" >> "$APP"

echo "Base program created"

echo "# Compiler flags
CXX = clang++
CXXFLAGS = -std=c++20 -Wall -Wextra -I\$(INCLUDE_DIR) -Werror -Wpedantic -g

# Directories
SRC_DIR = src
INCLUDE_DIR = include
BUILD_DIR = build
DEBUG_DIR = debug

# Files and include directories
SRC_FILES := \$(shell find \$(SRC_DIR) -type f -name '*.cpp')
INCLUDE_DIRS := \$(shell find \$(INCLUDE_DIR) -type d)

MAIN := ./app.cpp
EXECUTABLE = \$(BUILD_DIR)/app

.PHONY: all clean debug run build

all: clean \$(EXECUTABLE) run

# Build the executable
\$(EXECUTABLE): \$(SRC_FILES)
	@mkdir -p \$(BUILD_DIR) # Make sure the build directory exists
	@echo \"Building executable...\"
	\$(CXX) \$(CXXFLAGS) -o \$@ \$^ \$(MAIN) && echo \"Executable built successfully!\" || echo \"Failed to build executable!\"

# Debug the executable
debug: \$(EXECUTABLE)
	@mkdir -p \$(DEBUG_DIR) # Make sure the debug directory exists
	@valgrind --leak-check=full --show-leak-kinds=all --track-origins=yes --verbose --log-file=\$(DEBUG_DIR)/valgrind_output.txt ./\$(EXECUTABLE)
	@echo \"Valgrind output saved to \$(DEBUG_DIR)/valgrind_output.txt\"
	@cat \$(DEBUG_DIR)/valgrind_output.txt

# Run the executable
run: \$(EXECUTABLE)
	@./\$(EXECUTABLE)

# Clean the build and debug directories
clean:
	rm -rf \$(BUILD_DIR)/* \$(DEBUG_DIR)/*

# Build the executable
build: clean \$(EXECUTABLE)"> Makefile

echo "Makefile created"

echo "{
	\"version\": \"2.0.0\",
	\"tasks\" : [
		{
			\"label\": \"make\",
			\"type\": \"shell\",
			\"command\": \"make build\",
		}
	]
}" >> "$TASKS"

echo "{
	\"launch\":{
		\"configurations\":[
			{
				\"name\":\"yeyea\",
				\"type\":\"cppdbg\",
				\"request\":\"launch\",
				\"program\":\"\${cwd}/build/app\",
				\"args\":[],
				\"stopAtEntry\":false,
				\"cwd\":\"\${workspaceFolder}\",
				\"environment\":[],
				\"externalConsole\":false,
				\"MIMode\":\"gdb\",
				\"setupCommands\":[
					{
						\"description\":\"Enable pretty-printing for gdb\",
						\"text\":\"-enable-pretty-printing\",
						\"ignoreFailures\":true
					}
				],
				\"preLaunchTask\":\"make\",
			},
			{
				\"type\" : \"node-terminal\",
				\"request\" : \"launch\",
				\"name\" : \"make\",
				\"command\" : \"make build\",
			}
		]
	}
}" >> "$SETTINGS"

echo "VSCode specific fuckery created"

make
